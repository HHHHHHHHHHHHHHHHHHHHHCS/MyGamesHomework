#pragma kernel CalcPoints
#pragma kernel BlitScreen

#pragma enable_d3d11_debug_symbols


RWStructuredBuffer<float3> _Points;
RWStructuredBuffer<float3> _BezierPoints;
int _PointsCount;
float _TStep;
float4x4 _VPSMatrix;


RWTexture2D<float4> _ResultTex;
uint _Width, _Height;
uint _TCount;

//阶乘 n>=0   n=0 ->1
int Factorial(int n)
{
    int r = 1;
    [unroll(20)]
    for (int i = 1; i <= n; i++)
    {
        r *= i;
    }
    return r;
}

[numthreads(1,1,1)]
void CalcPoints(uint3 id : SV_DispatchThreadID)
{
    float3 p = float3(0, 0, 0);
    int count = _PointsCount - 1;
    float t = id.x * _TStep;
    int a = Factorial(count);

    for (int i = 0; i < _PointsCount; i++)
    {
        int b = Factorial(i);
        int c = Factorial(count - i);
        c = a * rcp(b * c);

        //compute shader 动态不确定数pow(0,0) 会nan 
        float d = count == i ? 1 : pow(abs(1.0 - t), count - i);
        float e = i == 0 ? 1 : pow(abs(t), i);
        e = c * d * e;

        p += _Points[i] * e;
    }

    p = mul(_VPSMatrix, float4(p, 1.0)).xyz;
    //这里为什么写float3  因为为了方便  把上面的注释了就是world pos 了
    _BezierPoints[id.x] = p.xyz;
}

//半径当做 0.5 -> 0.25
//用距离表示 msaa  1  临近点
float CheckPointCircle(float2 p0, float2 p1, float2 pixel)
{
    float2 minP = min(p0, p1) - 0.5;
    float2 maxP = max(p0, p1) + 0.5;

    if (pixel.x < minP.x || pixel.x > maxP.x || pixel.y < minP.y || pixel.y > maxP.y)
    {
        return 0;
    }
    else
    {
        float2 v0 = pixel - p0;
        float2 v1 = p1 - p0;

        float a = dot(v0, v0);
        float b = dot(v0, v1);
        float b2 = b * b;
        float c = dot(v1, v1);
        b = b2 / c;
        float d = a - b;

        float col = d <= 0.25;
        col += d <= 1;
        return col * 0.5;
    }
}

//这里可以分更小的方块做msaa
bool CheckPointRect(float2 p0, float2 p1, float2 pixel)
{
    float2 minP = min(p0, p1) - 0.5;
    float2 maxP = max(p0, p1) + 0.5;

    if (pixel.x < minP.x || pixel.x > maxP.x || pixel.y < minP.y || pixel.y > maxP.y)
    {
        return false;
    }
    else
    {
        float2 a = pixel - 0.5;
        float2 b = pixel + 0.5;

        float d = (p1.y - p0.y) / (p1.x - p0.x);
        float c = p0.y - d * p0.x;

        float ya = d * a.x + c;
        float yb = d * b.x + c;

        return ((b.y >= ya) && (yb >= a.y)) || ((ya >= a.y) && (b.y >= yb));
    }
}

[numthreads(8,8,1)]
void BlitScreen(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _Width || id.y >= _Height)
    {
        return;
    }

    float4 col = 0;

    float2 pixelPoint = id.xy + 0.5;

    //这里可以对点做AABB 提前减少像素的循环次数
    for (uint i = 0; i < _TCount - 1; i++)
    {
        float2 p0 = _BezierPoints[i].xy;
        float2 p1 = _BezierPoints[i + 1].xy;

        col += CheckPointCircle(p0, p1, pixelPoint);
    }

    _ResultTex[id.xy] = col;
}
